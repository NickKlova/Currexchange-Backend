// <auto-generated />
using System;
using ExchangeOffice.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExchangeOffice.DataAccess.Migrations
{
    [DbContext(typeof(DataAccessContext))]
    partial class DataAccessContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlacklist")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankGovId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankGovId")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3b1c2d3-4e5f-6789-abcd-ef0123456789"),
                            Code = "UAH",
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(529),
                            Description = "Українська гривня",
                            IsActive = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Symbol = "₴"
                        });
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.ExchangeSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BaseCurrencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("HighTransactionThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LowBalanceThreshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PercantageTransactionIncome")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrencyId");

                    b.ToTable("ExchangeSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c5011cb-2bbd-4f96-9b36-66cfcb961dc5"),
                            BaseCurrencyId = new Guid("a3b1c2d3-4e5f-6789-abcd-ef0123456789"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1115),
                            HighTransactionThreshold = 10000m,
                            LowBalanceThreshold = 1000m,
                            PercantageTransactionIncome = 0.05m
                        });
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Fund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Funds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc0fa8e3-4a15-4d19-ba0b-2ef80ab94c56"),
                            Amount = 0m,
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1008),
                            CurrencyId = new Guid("a3b1c2d3-4e5f-6789-abcd-ef0123456789"),
                            IsActive = true,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.IssuanceLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SellRate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("IssuanceLogs");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3b0c442-98fc-1c14-9afd-2fb77c6076f6"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1067),
                            Name = "Buy"
                        },
                        new
                        {
                            Id = new Guid("c2d4e3f6-63a4-4d58-bc63-ad6e2e7b3fb6"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1070),
                            Name = "Sell"
                        });
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SellRate")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Rates");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("OperationId");

                    b.HasIndex("RateId");

                    b.HasIndex("StatusId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.ReservationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReservationStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1039),
                            Name = "In progress"
                        },
                        new
                        {
                            Id = new Guid("12345678-9abc-def0-1234-56789abcdef0"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1041),
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = new Guid("8e4f2c7d-91b3-4a5f-9b6d-3e7a8b9c1d0e"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1043),
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = new Guid("e4e2d0a6-3f1b-4b4e-9441-3e1a5b7f1110"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1045),
                            Name = "Issued"
                        });
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RateLogId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("OperationId");

                    b.HasIndex("RateLogId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.TransactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2c1a3e5-4d6b-4e8f-9a7c-5b1d3e4f6a7b"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1093),
                            Name = "Transaction"
                        },
                        new
                        {
                            Id = new Guid("d4f6e2a1-9c3b-4d8e-7f2a-5c1e3b4f6a9d"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(1095),
                            Name = "Reservation"
                        });
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2e6fa3f-4d4c-4e5f-9f15-90c8fea98721"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(490),
                            Name = "Owner"
                        },
                        new
                        {
                            Id = new Guid("a9b8c7d6-5e4f-3a2b-1c0d-f9e8d7c6b5a4"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(493),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("f1e2d3c4-b5a6-6c7d-8e9f-0a1b2c3d4e5f"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(495),
                            Name = "Cashier"
                        },
                        new
                        {
                            Id = new Guid("7f6e5d4c-3b2a-1f0e-9d8c-2b1a0f9e8d7c"),
                            CreatedOn = new DateTime(2024, 5, 27, 13, 5, 1, 503, DateTimeKind.Utc).AddTicks(496),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.ExchangeSetting", b =>
                {
                    b.HasOne("ExchangeOffice.DataAccess.DAO.Currency", "BaseCurrency")
                        .WithMany()
                        .HasForeignKey("BaseCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseCurrency");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Fund", b =>
                {
                    b.HasOne("ExchangeOffice.DataAccess.DAO.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.IssuanceLog", b =>
                {
                    b.HasOne("ExchangeOffice.DataAccess.DAO.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Rate", b =>
                {
                    b.HasOne("ExchangeOffice.DataAccess.DAO.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Reservation", b =>
                {
                    b.HasOne("ExchangeOffice.DataAccess.DAO.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeOffice.DataAccess.DAO.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExchangeOffice.DataAccess.DAO.Rate", "Rate")
                        .WithMany()
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeOffice.DataAccess.DAO.ReservationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("OperationType");

                    b.Navigation("Rate");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.Transaction", b =>
                {
                    b.HasOne("ExchangeOffice.DataAccess.DAO.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeOffice.DataAccess.DAO.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExchangeOffice.DataAccess.DAO.IssuanceLog", "RateLog")
                        .WithMany()
                        .HasForeignKey("RateLogId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExchangeOffice.DataAccess.DAO.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId");

                    b.HasOne("ExchangeOffice.DataAccess.DAO.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("OperationType");

                    b.Navigation("RateLog");

                    b.Navigation("Reservation");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("ExchangeOffice.DataAccess.DAO.User", b =>
                {
                    b.HasOne("ExchangeOffice.DataAccess.DAO.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExchangeOffice.DataAccess.DAO.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Contact");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
